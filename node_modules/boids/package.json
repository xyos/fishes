{
  "name": "boids",
  "version": "1.0.0",
  "dependencies": {
    "inherits": "~1.0.0"
  },
  "devDependencies": {
    "raf": "0.0.2",
    "beefy": "~0.1.0",
    "browserify": "~2.13.2",
    "ticker": "0.0.1",
    "fps": "0.0.3",
    "debounce": "0.0.2"
  },
  "gitHead": "d450d79f6388cb739e55a84b11c5b38660897ac1",
  "description": "ERROR: No README.md file found!",
  "main": "index.js",
  "scripts": {
    "prepublish": "node_modules/.bin/browserify demo.js -o bundle.js",
    "start": "node_modules/.bin/beefy demo.js:bundle.js"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/hughsk/boids.git"
  },
  "keywords": [
    "boids",
    "flocking",
    "algorithm",
    "emergence"
  ],
  "author": {
    "name": "Hugh Kennedy",
    "email": "hughskennedy@gmail.com",
    "url": "http://hughskennedy.com/"
  },
  "license": "MIT",
  "readme": "# boids #\n\nA lightweight JavaScript implementation of\n[boids](http://en.wikipedia.org/wiki/Boids). Its \"API\" is a little limited,\nbut it's reasonably performant - my MacBook ran the demo with 1,000 boids at\n60 frames per second.\n\n[check out the demo](http://hughsk.github.io/boids)\n\nI used an earlier, hastier version for the flocks in\n[grow.](http://github.com/hughsk/ludum-dare-26)\n\n## Installation ##\n\nFor use with [browserify](http://browserify.org):\n\n``` bash\nnpm install boids\n```\n\n## Usage ##\n\n``` javascript\nvar boids = require('boids')\n  , raf = require('raf')\n\nvar flock = boids({\n  boids: 50,              // The amount of boids to use\n  speedLimit: 0,          // Max steps to take per tick\n  accelerationLimit: 1,   // Max acceleration per tick\n  separationDistance: 60, // Radius at which boids avoid others\n  alignmentDistance: 180, // Radius at which boids align with others\n  choesionDistance: 180,  // Radius at which boids approach others\n  separationForce: 0.15,  // Speed to avoid at\n  alignmentForce: 0.25,   // Speed to align with other boids\n  choesionForce: 0.1,     // Speed to move towards other boids\n  attractors: []\n})\n\nraf(window).on('data', function() {\n  ctx.fillStyle = 'black'\n  ctx.fillRect(0, 0, canvas.width, canvas.height)\n  ctx.fillStyle = 'white'\n  ctx.save()\n  ctx.translate(-canvas.width/2, -canvas.height/2)\n  flock.tick()\n  flock.boids.forEach(function(boid) {\n    ctx.fillRect(boid[0], boid[1], 1, 1)\n  })\n  ctx.restore()\n})\n```\n\n**flock = boids([options])**\n\n**flock.tick()**\n\nMoves the boid simulation forward one tick - if you're running an animation,\nyou should be calling this on each frame.\n\n**flock.boids**\n\nAll of your boids are stored as an array of arrays, with each\narray containing the following variables for a single boid:\n\n``` javascript\n[xPosition, yPosition, xSpeed, ySpeed, xAcceleration, yAcceleration]\n```\n\nBecause the flock is just an array, it should be entirely safe for you\nto add and remove elements without any unintended side effects, provided all\nof the arrays are at least 6 elements long and contain numerical values. For\nexample, you can add a new boid moving at a random speed to the origin like so:\n\n``` javascript\nflock.boids.push([0, 0, Math.random()*10-5, Math.random()*10-5, 0, 0])\n```\n\n**flock.attractors**\n\nYou can use attractors to control the flow of the boids - essentially,\nproviding them with goals and obstacles. Each attractor contains:\n\n``` javascript\n[xPosition, yPosition, radius, force]\n```\n\nNote that you can use a negative value for `force` to repel boids instead of\nattracting them. Again, it should be safe to modify, add and remove these\narrays without any surprises.\n\n## Benchmark ##\n\nRunning `benchmark.js` yielded the following results in Node:\n\n```\n50 boids: 34013 ticks/sec\n100 boids: 10000 ticks/sec\n150 boids: 4537 ticks/sec\n200 boids: 2583 ticks/sec\n250 boids: 1653 ticks/sec\n300 boids: 1159 ticks/sec\n350 boids: 835 ticks/sec\n400 boids: 654 ticks/sec\n450 boids: 518 ticks/sec\n500 boids: 419 ticks/sec\n550 boids: 347 ticks/sec\n600 boids: 292 ticks/sec\n650 boids: 249 ticks/sec\n700 boids: 215 ticks/sec\n750 boids: 187 ticks/sec\n800 boids: 160 ticks/sec\n850 boids: 130 ticks/sec\n900 boids: 119 ticks/sec\n950 boids: 107 ticks/sec\n1000 boids: 95 ticks/sec\n```\n\nI'm very much open to pull requests that can help improve performance :)\n",
  "readmeFilename": "README.md",
  "_id": "boids@1.0.0",
  "dist": {
    "shasum": "1ee436c33f291ad35e9d8726a45c0d5ae504bc32",
    "tarball": "http://registry.npmjs.org/boids/-/boids-1.0.0.tgz"
  },
  "_npmVersion": "1.1.71",
  "_npmUser": {
    "name": "hughsk",
    "email": "hughskennedy@gmail.com"
  },
  "maintainers": [
    {
      "name": "hughsk",
      "email": "hughskennedy@gmail.com"
    }
  ],
  "directories": {},
  "_shasum": "1ee436c33f291ad35e9d8726a45c0d5ae504bc32",
  "_resolved": "https://registry.npmjs.org/boids/-/boids-1.0.0.tgz",
  "_from": "boids@*"
}
